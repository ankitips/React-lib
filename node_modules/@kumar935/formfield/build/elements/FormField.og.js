'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LangUtil = require('../../utils/LangUtil');

var _AsyncLib = require('../AsyncLib');

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _Constants = require('../Constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ERROR_MSGS = {
  DEFAULT: 'There was an error',
  FIELD_EMPTY: 'This field cannot be empty',
  PWD_INVALID: 'Password should contain at least one uppercase alphabet, digit and a special character (!, @, $, %)',
  FAILED: 'failed',
  INVALID_EMAIL: 'Please enter a valid email ID',
  INVALID_CIVILID: 'Invalid Civil Id format',
  SP_CH_NOT_ALLOWED: 'Special character not allowed',
  NO_SPACES: 'No spaces allowed',
  THESE_SP_CH_NOT_ALLOWED: 'This special character is not allowed. Characters allowed are  ! @ $ and %',
  NO_NUMBERS: 'Numbers are not allowed',
  ONLY_ALPHABETS: "Please enter valid input (alphabets with special characters allowed [-], [.], [:], ['])",
  INVALID_INPUT: 'Please enter valid input',
  ONLY_NUMBERS: 'Only numbers are allowed',
  ONLY_ARABIC: 'Only Arabic characters allowed'
};

var validationProfilesConfig = {
  default: function _default(val, props) {
    if (val === '') {
      var emptyErr = (0, _LangUtil.I18n)('g.msg.fieldempty:' + props.config.label);
      if (props.config.emptyErrKey) {
        emptyErr = (0, _LangUtil.I18n)(props.config.emptyErrKey);
      }
      return {
        valid: false,
        errorMsg: emptyErr
      };
    } else if (props.config.sizeRange) {
      var min = props.config.sizeRange[0] || 0;
      var max = props.config.sizeRange[1] || Infinity;
      var exact = min === max;
      if (val.length <= max && val.length >= min) {
        return {
          valid: true
        };
      } else {
        return {
          valid: false,
          errorMsg: 'Length of ' + props.config.label + ' should be ' + (exact ? min : 'between ' + min + ' and ' + max) + ' ' + (props.config.type === 'number' ? 'digits' : 'characters')
        };
      }
    } else {
      return {
        valid: true
      };
    }
  },
  noSpaces: function noSpaces(val) {
    var containsSpace = /\s/g.test(val);
    return {
      valid: !containsSpace,
      errorMsg: ERROR_MSGS.NO_SPACES
    };
  },
  noNumbers: function noNumbers(val) {
    var hasNumber = /\d/.test(val);
    return {
      valid: !hasNumber,
      errorMsg: ERROR_MSGS.NO_NUMBERS
    };
  },
  theseSpChNotAllowed: function theseSpChNotAllowed(val) {
    var containsUnwantedSpChars = /[#^&*()_+\-=\[\]{};':"\\|,.<>\/?`~]/.test(val);
    return {
      valid: !containsUnwantedSpChars,
      errorMsg: ERROR_MSGS.THESE_SP_CH_NOT_ALLOWED
    };
  },
  password: function password(val) {
    var containsDigits = /[0-9]/.test(val);
    var containsUpper = /[A-Z]/.test(val);
    var containsLower = /[a-z]/.test(val);
    var containsSpecialChars = /[!@%$]/.test(val);
    var containsUnwantedSpChars = /[#^&*()_+\-=\[\]{};':"\\|,.<>\/?`~]/.test(val);

    if (containsDigits && containsUpper && containsLower && containsSpecialChars && !containsUnwantedSpChars) {
      return {
        valid: true
      };
    } else {
      return {
        valid: false,
        errorMsg: ERROR_MSGS.PWD_INVALID
      };
    }
  },
  email: function email(val) {
    var valid = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/.test(val);
    return {
      valid: valid,
      errorMsg: ERROR_MSGS.INVALID_EMAIL
    };
  },
  civilid: function civilid(val) {
    var valid = !isNaN(val) && val.toString().indexOf(".") === -1;
    return {
      valid: valid,
      errorMsg: ERROR_MSGS.INVALID_CIVILID
    };
  },
  spCharacterNotAllowed: function spCharacterNotAllowed(val) {
    var notAllowed = /[ `~!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(val);
    return {
      valid: !notAllowed,
      errorMsg: ERROR_MSGS.SP_CH_NOT_ALLOWED
    };
  },
  onlyAlphabets: function onlyAlphabets(val) {
    var valid = /[a-z ,.'-]+/.test(val);
    return {
      valid: valid,
      errorMsg: ERROR_MSGS.ONLY_ALPHABETS
    };
  },
  onlyNumbers: function onlyNumbers(val) {
    return {
      valid: !isNaN(val),
      errorMsg: ERROR_MSGS.ONLY_NUMBERS
    };
  },
  onlyArabicChars: function onlyArabicChars(val) {
    var valid = /[\u0621-\u064A\u0660-\u0669 ]+/.test(val);
    return {
      valid: valid,
      errorMsg: ERROR_MSGS.ONLY_ARABIC
    };
  },
  "regex_[a-z ,.'-]+": function regex_AZ(val) {
    return this.onlyAlphabets(val);
  },
  'regex_[\u0621-\u064A\u0660-\u0669 ]+': function regex_(val) {
    return this.onlyArabicChars(val);
  }
};

var FormField = function (_Component) {
  _inherits(FormField, _Component);

  function FormField() {
    _classCallCheck(this, FormField);

    var _this = _possibleConstructorReturn(this, (FormField.__proto__ || Object.getPrototypeOf(FormField)).call(this));

    _this.showHidePwd = function () {
      _this.setState(function (prevState) {
        if (_this.state.webKitTextSecurityPresent) {
          return {
            hide: !prevState.hide
          };
        } else {
          var hide = !prevState.hide;
          return {
            hide: hide,
            pwdType: hide ? 'password' : 'text'
          };
        }
      });
    };

    _this.handleSelectChange = function (newVal) {
      _this.setState({
        value: newVal,
        error: false,
        errorMsg: ''
      }, function () {
        if (_this.props.onChange) {
          _this.props.onChange(newVal);
        }
      });
    };

    _this.handleRadioChange = function (changeEvent) {
      var newValue = changeEvent.target.value;
      _this.setState({
        value: changeEvent.target.value,
        error: false,
        errorMsg: ''
      }, function () {
        if (_this.props.onChange) {
          _this.props.onChange(newValue);
        }
      });
    };

    _this.handleInputChange = function (e, virtual) {
      if (_this.state.showKeyboard && !virtual) return; //if virtual keyboard open, mechanical keyboard ignore input.
      var newValue = e.target.value;
      if (_this.props.config.type === 'number') {
        if (isNaN(newValue)) return;
      }
      if (_this.props.config.sizeRange) {
        var max = _this.props.config.sizeRange[1];
        if (newValue.length > max) {
          return;
        }
      }
      if (_this.props.config.inputValidations) {
        var invalid = _this.isInputInvalid(newValue);
        if (invalid === true) return;
      }
      _this.setState({
        error: false,
        errorMsg: '',
        value: newValue
      }, function () {
        if (_this.props.config.liveValidations) _this.liveValidate();
        if (_this.props.onChange) {
          _this.props.onChange(newValue);
        }
      });
    };

    _this.onFocusCustomPwd = function () {
      _this.setState({ readOnly: false, focused: true });
    };

    _this.onClickShowKeyboard = function () {
      _this.setState(function (prevState) {
        return _extends({
          showKeyboard: !prevState.showKeyboard
        }, _extends({}, prevState.showKeyboard === true ? {} : { value: '' }));
      });
    };

    _this.clear = function () {
      if (_this.props.config.type !== "select") return;
      _this.setState({
        value: "",
        label: "Select..."
      });
    };

    _this.onChangeVirtualKeyboard = function (e) {
      if (!_this.keyboard) return;
      _this.input.focus();
      _this.handleInputChange({ target: { value: e } }, true);
    };

    _this.onVirtualKeyboardInputSubmitted = function () {
      _this.setState({ showKeyboard: false });
    };

    _this.onVirtualKeyboardInputCancelled = function () {
      _this.setState({ showKeyboard: false, value: '' });
    };

    _this.state = {
      error: false,
      errorMsg: '',
      value: '',
      pwdType: 'text',
      hide: false,
      readOnly: true,
      webKitTextSecurityPresent: false,
      showKeyboard: false
    };
    return _this;
  }

  _createClass(FormField, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.config.initVal) this.setState({ value: this.props.config.initVal });
      if (this.props.onRef) {
        this.props.onRef(this);
      } else {
        console.warn('define onRef function for: ' + this.props.config.label);
      }
      this.init();
    }
  }, {
    key: 'init',
    value: function init() {
      var _this2 = this;

      var isIE = /*@cc_on!@*/false || !!document.documentMode;
      if (this.props.config.type === 'custom-pwd') {
        var x = document.getElementsByTagName("input")[0];
        var style = window.getComputedStyle(x);
        if (style.webkitTextSecurity) {
          this.setState({ webKitTextSecurityPresent: true });
          window.setTimeout(function () {
            return _this2.setState({ hide: true });
          }, 100);
        } else {
          this.setState(_extends({
            pwdType: 'password',
            hide: true
          }, _extends({}, isIE ? { readOnly: false } : {})));
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.setValue('');
      if (this.props.onRef) this.props.onRef(null);
    }
  }, {
    key: 'setError',
    value: function setError(config) {
      if (this.props.config.type === 'custom-pwd') this.setValue(this.value);
      this.setState({
        error: true,
        errorMsg: config.errorMsg || ERROR_MSGS.DEFAULT
      });
    }
  }, {
    key: 'setErrorOnly',
    value: function setErrorOnly(config) {
      this.setState({
        error: true,
        errorMsg: config.errorMsg || ERROR_MSGS.DEFAULT
      });
    }
  }, {
    key: 'clearError',
    value: function clearError() {
      this.setState({
        error: false,
        errorMsg: ''
      });
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'isInputInvalid',
    value: function isInputInvalid(val) {
      var inputValidations = this.props.config.inputValidations || [];
      var invalid = false;
      for (var i = 0; i < inputValidations.length; i++) {
        var valProfile = inputValidations[i];
        if (validationProfilesConfig[valProfile] === undefined) {
          if (valProfile.indexOf(_Constants.REGEXP_PREFIX) === 0) {
            var regExp = new RegExp(valProfile.replace(_Constants.REGEXP_PREFIX, ""));
            invalid = !regExp.test(this.state.value);
            if (invalid) break;
          }
        } else {
          var result = validationProfilesConfig[inputValidations[i]](val, this.props);
          if (!result.valid) {
            invalid = true;
            break;
          }
          invalid = false;
        }
      }
      return invalid;
    }
  }, {
    key: 'liveValidate',
    value: function liveValidate() {
      var validationProfiles = this.props.config.liveValidations || ['default'];
      return this.validate(validationProfiles);
    }
  }, {
    key: 'isValid',
    value: function isValid() {
      var validationProfiles = this.props.config.validationProfiles || ['default'];
      return this.validate(validationProfiles);
    }
  }, {
    key: 'validate',
    value: function validate(validationProfiles) {
      var valid = false;
      if (validationProfiles.length === 0) valid = true;
      for (var i = 0; i < validationProfiles.length; i++) {
        var valProfile = validationProfiles[i];
        if (validationProfilesConfig[valProfile] === undefined) {
          if (valProfile.indexOf(_Constants.REGEXP_PREFIX) === 0) {
            var regExp = new RegExp(valProfile.replace(_Constants.REGEXP_PREFIX, ""));
            valid = regExp.test(this.state.value);
            if (!valid) {
              this.setState({
                error: true,
                errorMsg: ERROR_MSGS.INVALID_INPUT
              });
              break;
            }
          }
        } else {
          var result = validationProfilesConfig[valProfile](this.state.value, this.props);
          if (!result.valid) {
            this.setState({
              error: true,
              errorMsg: result.errorMsg
            });
            valid = false;
            break;
          }
          valid = true;
        }
      }
      if (process.env.DEV) console.debug(this.props.config.label, " ", valid);
      return valid;
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      if (this.props.config.type === 'custom-pwd') return this.getValueSetBlank();
      return this.state.value;
    }
  }, {
    key: 'getOnlyValue',
    value: function getOnlyValue() {
      return this.state.value;
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      var _this3 = this;

      return new Promise(function (resolve) {
        _this3.setState(_extends({
          value: value
        }, !value ? {} : { error: false, errorMsg: "" }), function () {
          resolve({ "done": "ok" });
        });
      });
    }
  }, {
    key: 'getValueSetBlank',
    value: function getValueSetBlank() {
      this.value = this.state.value;
      this.setValue('');
      return this.value;
    }
    // onFocusCustomPwd =()=>{
    //   if(!this.state.focused) {
    //     this.setState({ hide: true, focused: true});
    //   }
    // }

  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          config = _props.config,
          onRef = _props.onRef,
          rest = _objectWithoutProperties(_props, ['config', 'onRef']);

      var common = {
        ref: function ref(input) {
          _this4.input = input;
        }
      };
      if (config.type === 'radio') {
        return _react2.default.createElement(
          'div',
          { className: 'radio-group' },
          config.label && !config.hideLabel ? _react2.default.createElement(
            'label',
            null,
            config.label
          ) : '',
          _react2.default.createElement(
            'div',
            { className: 'radio-group-wraper' },
            config.options.map(function (option, i) {
              return _react2.default.createElement(
                _react2.default.Fragment,
                { key: 'radio-option-' + i },
                _react2.default.createElement(
                  'label',
                  { className: 'radio' },
                  _react2.default.createElement('input', {
                    type: 'radio',
                    id: option.label,
                    value: option.value,
                    checked: _this4.state.value == option.value,
                    onChange: _this4.handleRadioChange }),
                  _react2.default.createElement('span', null)
                ),
                _react2.default.createElement(
                  'label',
                  { className: 'radioLabel', htmlFor: option.label },
                  option.label
                )
              );
            })
          ),
          _react2.default.createElement(
            'span',
            { className: 'error' },
            this.state.errorMsg
          )
        );
      }
      if (config.type === 'select') {
        var selectProps = _extends({
          name: 'select-' + config.label,
          value: this.state.value,
          options: config.options || [],
          onChange: this.handleSelectChange,
          clearable: false,
          noResultsText: config.loading ? 'Loading...' : 'No Results'
        }, config.SelectArgs ? config.SelectArgs : {});
        return _react2.default.createElement(
          'div',
          {
            className: 'select-box label ' + (config.containerClass || '') + ' ' + (config.loading ? 'input-loading' : ''),
            error: this.state.error.toString() },
          _react2.default.createElement(
            'label',
            null,
            config.label
          ),
          this.state.disabled ? _react2.default.createElement(_reactSelect2.default, _extends({}, selectProps, {
            disabled: true
          })) : _react2.default.createElement(_reactSelect2.default, _extends({}, selectProps, {
            disabled: false
          })),
          _react2.default.createElement(
            'span',
            { className: 'error-msg select-error' },
            this.state.errorMsg
          ),
          _react2.default.createElement('span', { className: 'line' })
        );
      }
      return _react2.default.createElement(
        'div',
        { className: 'floating-label-input ' + (config.containerClass || '') },
        function () {
          switch (config.type) {
            case 'text':
            case 'password':
              return _react2.default.createElement('input', _extends({
                type: config.type,
                value: _this4.state.value,
                error: _this4.state.error.toString(),
                autoComplete: 'off'
              }, rest, {
                onChange: _this4.handleInputChange
              }, _this4.state.disabled ? { disabled: true, active: "true" } : {}, {
                required: true
              }, common));
              break;
            case 'custom-pwd':
              return [_react2.default.createElement('input', { type: 'password', tabIndex: '-1', required: true, name: 'fake_pwd', style: { position: 'absolute', top: '-20000px' }, key: 'fake-pwd' }), _react2.default.createElement('input', _extends({
                key: 'real-pwd',
                type: _this4.state.pwdType
              }, _this4.state.hide ? { 'data-type': 'custom-pwd' } : {}, {
                value: _this4.state.value
              }, _this4.state.readOnly ? { 'readOnly': 'true' } : {}, {
                onFocus: _this4.onFocusCustomPwd,
                autoComplete: 'off',
                error: _this4.state.error.toString()
              }, rest, {
                onChange: _this4.handleInputChange,
                required: true
              }, common))];
              break;
            case 'number':
              return _react2.default.createElement('input', _extends({
                type: 'text',
                value: _this4.state.value,
                error: _this4.state.error.toString()
              }, rest, {
                onChange: _this4.handleInputChange,
                required: true
              }, common));
              break;
            default:
              return _react2.default.createElement('input', _extends({
                type: 'text',
                value: _this4.state.value,
                autoComplete: 'off',
                error: _this4.state.error.toString()
              }, rest, {
                onChange: _this4.handleInputChange,
                required: true
              }, common));
          }
        }(),
        config.type === 'custom-pwd' ? _react2.default.createElement('span', { className: 'eye ' + (this.state.hide ? 'show' : 'hide'), onClick: this.showHidePwd }) : '',
        config.virtualKeyboard ? _react2.default.createElement(
          'div',
          { className: 'keyboard-container', key: 'keyboard-container' },
          this.state.showKeyboard ? _react2.default.createElement(_AsyncLib.AsyncVKeyboard, {
            value: this.state.value,
            name: 'keyboard',
            options: _extends({
              type: "input",
              layout: "custom",
              customLayout: {
                'normal': ['~ ! @ # $ % ^ & * ( )', '1 2 3 4 5 6 7 8 9 0 {bksp}', 'q w e r t y u i o p', 'a s d f g h j k l {enter}', '{shift} z x c v b n m {shift}', '{accept} {space} {cancel} {extender}'],
                'shift': ['~ ! @ # $ % ^ & * ( )', '1 2 3 4 5 6 7 8 9 0 {bksp}', 'Q W E R T Y U I O P', 'A S D F G H J K L {enter}', '{shift} Z X C V B N M {shift}', '{accept} {space} {cancel} {extender}']
              },
              alwaysOpen: true,
              usePreview: false,
              useWheel: false,
              stickyShift: true,
              appendLocally: true,
              color: "light",
              updateOnChange: true,
              initialFocus: true
            }, _extends({}, config.sizeRange ? { maxLength: config.sizeRange[1] } : {}), {
              display: {
                "accept": "Submit"
              }
            }),
            onChange: this.onChangeVirtualKeyboard,
            onAccepted: this.onVirtualKeyboardInputSubmitted,
            onRef: function onRef(ref) {
              _this4.keyboard = ref;
              if (_this4.keyboard && _this4.keyboard.interface) {
                _this4.keyboard.interface.keyaction.cancel = _this4.onVirtualKeyboardInputCancelled;
                _this4.keyboard.interface.keyaction.enter = _this4.onVirtualKeyboardInputSubmitted;
              }
            }
          }) : ''
        ) : '',
        config.label && !config.hideLabel ? _react2.default.createElement(
          'label',
          { htmlFor: this.props.id },
          this.props.config.label
        ) : '',
        _react2.default.createElement(
          'span',
          { className: 'error-msg' },
          this.state.errorMsg
        ),
        config.posRightBtn && config.posRightBtn.domClass ? _react2.default.createElement('label', {
          className: 'position-right ' + config.posRightBtn.domClass,
          onClick: config.posRightBtn.onClick
        }) : '',
        _react2.default.createElement('span', { className: 'line' }),
        config.virtualKeyboard && config.type === 'custom-pwd' ? _react2.default.createElement(
          'div',
          {
            className: 'checkboxWrapper keyboard-checkbox' },
          _react2.default.createElement('input', {
            name: 'show-keyboard ' + this.props.id,
            id: 'show-keyboard ' + this.props.id,
            type: 'checkbox',
            checked: this.state.showKeyboard,
            onChange: this.onClickShowKeyboard,
            hidden: true
          }),
          _react2.default.createElement(
            'label',
            { htmlFor: 'show-keyboard ' + this.props.id, className: 'checkbox' },
            (0, _LangUtil.I18n)("g.msg.vkboard")
          )
        ) : ''
      );
    }
  }]);

  return FormField;
}(_react.Component);

exports.default = FormField;